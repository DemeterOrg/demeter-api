# ==============================================================================
# DEMETER API - Environment Variables Template
# ==============================================================================
# Este é um template das variáveis de ambiente necessárias para executar a API.
# Copie este arquivo para .env e preencha com seus valores reais.
#
# IMPORTANTE: Nunca commite o arquivo .env com valores reais!
# ==============================================================================

# ==============================================================================
# APPLICATION SETTINGS
# ==============================================================================

# Nome do projeto
PROJECT_NAME=DEMETER-API

# Versão da API
VERSION=1.0.0

# Descrição
DESCRIPTION="API para classificação de grãos com IA"

# Prefixo da API (ex: /api/v1)
API_V1_STR=/api/v1

# Ambiente de execução: development, staging, production
ENVIRONMENT=development

# Modo debug (true/false) - Automaticamente false em production
DEBUG=true

# ==============================================================================
# DATABASE SETTINGS
# ==============================================================================

# URL de conexão com PostgreSQL usando AsyncPG
# Formato: postgresql+asyncpg://user:password@host:port/database
# Exemplo local: postgresql+asyncpg://postgres:postgres@localhost:5432/demeter
DATABASE_URL=postgresql+asyncpg://user:password@localhost:5432/demeter

# Habilitar logs SQL (true/false) - Automaticamente false em production
DATABASE_ECHO=true

# Tamanho do pool de conexões (1-20)
DATABASE_POOL_SIZE=5

# Máximo de conexões extras além do pool (0-50)
DATABASE_MAX_OVERFLOW=10

# ==============================================================================
# SECURITY & AUTHENTICATION
# ==============================================================================

# Chave secreta para assinatura de tokens JWT (MÍNIMO 32 caracteres)
# ATENÇÃO: Gere uma chave segura e única para cada ambiente!
# Pode usar: openssl rand -hex 32
SECRET_KEY=your-super-secret-key-change-this-min-32-chars-please

# Algoritmo de criptografia JWT (HS256 recomendado)
ALGORITHM=HS256

# Tempo de expiração do access token em minutos (5-60)
ACCESS_TOKEN_EXPIRE_MINUTES=15

# Tempo de expiração do refresh token em dias (1-30)
REFRESH_TOKEN_EXPIRE_DAYS=7

# ==============================================================================
# PASSWORD POLICY
# ==============================================================================

# Tamanho mínimo da senha (mínimo 8)
PASSWORD_MIN_LENGTH=8

# Exigir letra maiúscula na senha (true/false)
PASSWORD_REQUIRE_UPPERCASE=true

# Exigir letra minúscula na senha (true/false)
PASSWORD_REQUIRE_LOWERCASE=true

# Exigir número na senha (true/false)
PASSWORD_REQUIRE_DIGIT=true

# Exigir caractere especial na senha (true/false)
PASSWORD_REQUIRE_SPECIAL=true

# ==============================================================================
# CORS SETTINGS
# ==============================================================================

# Origens permitidas (separadas por vírgula)
# Exemplo: http://localhost:3000,https://app.demeter.com
ALLOWED_ORIGINS=http://localhost:3000

# Métodos HTTP permitidos (separados por vírgula)
ALLOWED_METHODS=GET,POST,PATCH,DELETE

# Headers permitidos (separados por vírgula)
ALLOWED_HEADERS=Authorization,Content-Type

# Permitir envio de cookies/credenciais (true/false)
ALLOW_CREDENTIALS=true

# ==============================================================================
# RATE LIMITING
# ==============================================================================

# Rate limit para endpoint de login (formato: X/Yminute)
# Exemplo: 5/15minute = 5 tentativas a cada 15 minutos
RATE_LIMIT_LOGIN=5/15minute

# Rate limit para endpoints autenticados
RATE_LIMIT_AUTHENTICATED=100/minute

# Rate limit para endpoints públicos
RATE_LIMIT_PUBLIC=20/minute

# ==============================================================================
# LOGGING
# ==============================================================================

# Nível de log: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Formato do log: json (produção), console (desenvolvimento)
LOG_FORMAT=console

# Diretório para armazenar logs
LOG_DIR=logs

# ==============================================================================
# FILE UPLOAD SETTINGS
# ==============================================================================

# Tamanho máximo de upload em bytes (10MB = 10485760)
MAX_UPLOAD_SIZE=10485760

# Tipos de imagem permitidos (separados por vírgula)
ALLOWED_IMAGE_TYPES=image/jpeg,image/png,image/jpg

# Diretório temporário para uploads
UPLOAD_DIR=uploads

# ==============================================================================
# AWS S3 SETTINGS (Opcional - para armazenamento em nuvem)
# ==============================================================================

# Usar AWS S3 para armazenamento (true/false)
USE_S3=false

# AWS Access Key ID (deixe vazio se USE_S3=false)
AWS_ACCESS_KEY_ID=

# AWS Secret Access Key (deixe vazio se USE_S3=false)
AWS_SECRET_ACCESS_KEY=

# Região AWS (padrão: us-east-1)
AWS_REGION=us-east-1

# Nome do bucket S3 (deixe vazio se USE_S3=false)
S3_BUCKET_NAME=

# ==============================================================================
# SUPABASE SETTINGS (Opcional - para staging/production)
# ==============================================================================

# URL do projeto Supabase
# Deixe vazio se estiver usando banco local
SUPABASE_URL=

# API Key do Supabase (anon/public key)
SUPABASE_KEY=

# Usar Supabase Storage para uploads (true/false)
# Se true, os uploads vão para Supabase ao invés de filesystem local
USE_SUPABASE_STORAGE=false

# Configurações do Storage S3 do Supabase
# Necessário apenas se USE_SUPABASE_STORAGE=true
SUPABASE_STORAGE_ENDPOINT=
SUPABASE_STORAGE_REGION=sa-east-1
SUPABASE_STORAGE_ACCESS_KEY_ID=
SUPABASE_STORAGE_SECRET_ACCESS_KEY=

# ==============================================================================
# EXTERNAL SERVICES (Futuro)
# ==============================================================================

# URL do serviço de IA para classificação de grãos
# AI_SERVICE_URL=http://localhost:8001/classify

# Chave de API do serviço de IA
# AI_API_KEY=

# ==============================================================================
# NOTAS IMPORTANTES
# ==============================================================================
#
# 1. Nunca commite o arquivo .env com valores reais
# 2. Use valores diferentes de SECRET_KEY para cada ambiente
# 3. Em produção, configure ENVIRONMENT=production
# 4. Em produção, use URLs HTTPS para ALLOWED_ORIGINS
# 5. Mantenha DATABASE_URL seguro - use usuário com privilégios mínimos
# 6. Para gerar SECRET_KEY seguro: openssl rand -hex 32
# 7. Configurar permissões do arquivo .env: chmod 600 .env (Linux/Mac)
#
# AMBIENTES:
# - development: Use .env (banco Docker local)
# - staging: Use .env.staging (banco Supabase homologação)
# - production: Use .env.production (banco Supabase produção)
#
# SUPABASE:
# Para usar Supabase como banco:
# 1. Crie projeto em https://supabase.com
# 2. Copie credenciais de Settings > Database
# 3. Use connection pooler (porta 6543) para melhor performance
# 4. DATABASE_URL deve ser: postgresql+asyncpg://postgres:PASSWORD@HOST:6543/postgres
#
# ==============================================================================
