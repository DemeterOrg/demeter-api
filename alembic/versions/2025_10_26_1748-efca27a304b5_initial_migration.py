"""initial_migration

Revision ID: efca27a304b5
Revises: 
Create Date: 2025-10-26 17:48:42.931660

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'efca27a304b5'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Nome único (formato: resource:action:scope)'),
    sa.Column('resource', sa.String(length=50), nullable=False, comment='Recurso (users, classifications, roles)'),
    sa.Column('action', sa.String(length=50), nullable=False, comment='Ação (create, read, update, delete, restore)'),
    sa.Column('scope', sa.String(length=20), nullable=False, comment='Escopo (own, all)'),
    sa.Column('description', sa.String(length=255), nullable=True, comment='Descrição da permissão'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_permissions'))
    )
    op.create_index(op.f('ix_permissions_name'), 'permissions', ['name'], unique=True)
    op.create_index(op.f('ix_permissions_resource'), 'permissions', ['resource'], unique=False)
    op.create_index('ix_permissions_resource_action_scope', 'permissions', ['resource', 'action', 'scope'], unique=True)
    op.create_table('roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False, comment='Nome único da role (ex: admin, classificador)'),
    sa.Column('description', sa.String(length=255), nullable=True, comment='Descrição da role'),
    sa.Column('is_system', sa.Boolean(), nullable=False, comment='Se é role do sistema (não pode ser deletada)'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles'))
    )
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False, comment='Email único do usuário'),
    sa.Column('hashed_password', sa.String(length=255), nullable=False, comment='Senha hasheada com Argon2id'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Nome completo do usuário'),
    sa.Column('phone', sa.String(length=20), nullable=False, comment='Telefone do usuário (apenas dígitos)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Se o usuário está ativo'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='Se o email foi verificado'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='Data de criação da conta'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='Data da última atualização'),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True, comment='Data do último login'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Data da exclusão'),
    sa.Column('deleted_by', sa.Integer(), nullable=True, comment='ID do admin que deletou'),
    sa.ForeignKeyConstraint(['deleted_by'], ['users.id'], name=op.f('fk_users_deleted_by_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index('ix_users_email_is_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index('ix_users_email_is_deleted', 'users', ['email', 'is_deleted'], unique=False)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_is_deleted'), 'users', ['is_deleted'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True, comment='ID do usuário que executou a ação'),
    sa.Column('action', sa.String(length=100), nullable=False, comment='Ação executada (ex: delete_user, restore_classification)'),
    sa.Column('resource_type', sa.String(length=50), nullable=False, comment='Tipo de recurso afetado (users, classifications, etc)'),
    sa.Column('resource_id', sa.Integer(), nullable=True, comment='ID do recurso afetado'),
    sa.Column('changes', sa.JSON(), nullable=True, comment='Detalhes da mudança (before/after)'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='Endereço IP do cliente'),
    sa.Column('user_agent', sa.String(length=255), nullable=True, comment='User agent do cliente'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_audit_logs_user_id_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_audit_logs'))
    )
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index(op.f('ix_audit_logs_created_at'), 'audit_logs', ['created_at'], unique=False)
    op.create_index('ix_audit_logs_created_at_desc', 'audit_logs', ['created_at'], unique=False)
    op.create_index('ix_audit_logs_resource', 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_resource_type'), 'audit_logs', ['resource_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.create_table('classifications',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='ID do usuário que criou a classificação'),
    sa.Column('image_path', sa.String(length=500), nullable=False, comment='Caminho da imagem armazenada'),
    sa.Column('grain_type', sa.String(length=100), nullable=False, comment='Tipo de grão classificado'),
    sa.Column('confidence_score', sa.Numeric(precision=5, scale=4), nullable=True, comment='Score de confiança da IA (0.0000 a 1.0000)'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='Dados adicionais da classificação'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Data da exclusão'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_classifications_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_classifications'))
    )
    op.create_index(op.f('ix_classifications_created_at'), 'classifications', ['created_at'], unique=False)
    op.create_index('ix_classifications_created_at_desc', 'classifications', ['created_at'], unique=False)
    op.create_index(op.f('ix_classifications_grain_type'), 'classifications', ['grain_type'], unique=False)
    op.create_index(op.f('ix_classifications_is_deleted'), 'classifications', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_classifications_user_id'), 'classifications', ['user_id'], unique=False)
    op.create_index('ix_classifications_user_is_deleted', 'classifications', ['user_id', 'is_deleted'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('token', sa.String(length=500), nullable=False, comment='Hash do refresh token'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='ID do usuário proprietário'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='Data de expiração do token'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='Data de criação do token'),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True, comment='Data de revogação do token'),
    sa.Column('is_revoked', sa.Boolean(), nullable=False, comment='Se o token foi revogado'),
    sa.Column('user_agent', sa.String(length=255), nullable=True, comment='User agent do cliente'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='Endereço IP do cliente'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_refresh_tokens_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_refresh_tokens'))
    )
    op.create_index(op.f('ix_refresh_tokens_expires_at'), 'refresh_tokens', ['expires_at'], unique=False)
    op.create_index('ix_refresh_tokens_expires_is_revoked', 'refresh_tokens', ['expires_at', 'is_revoked'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_is_revoked'), 'refresh_tokens', ['is_revoked'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_token'), 'refresh_tokens', ['token'], unique=True)
    op.create_index(op.f('ix_refresh_tokens_user_id'), 'refresh_tokens', ['user_id'], unique=False)
    op.create_index('ix_refresh_tokens_user_is_revoked', 'refresh_tokens', ['user_id', 'is_revoked'], unique=False)
    op.create_table('role_permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('granted_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name=op.f('fk_role_permissions_permission_id_permissions'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_role_permissions_role_id_roles'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_role_permissions'))
    )
    op.create_index(op.f('ix_role_permissions_permission_id'), 'role_permissions', ['permission_id'], unique=False)
    op.create_index(op.f('ix_role_permissions_role_id'), 'role_permissions', ['role_id'], unique=False)
    op.create_index('ix_role_permissions_unique', 'role_permissions', ['role_id', 'permission_id'], unique=True)
    op.create_table('user_roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('assigned_by', sa.Integer(), nullable=True, comment='ID do admin que atribuiu a role'),
    sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], name=op.f('fk_user_roles_assigned_by_users'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_user_roles_role_id_roles'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_roles_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_roles'))
    )
    op.create_index(op.f('ix_user_roles_role_id'), 'user_roles', ['role_id'], unique=False)
    op.create_index('ix_user_roles_unique', 'user_roles', ['user_id', 'role_id'], unique=True)
    op.create_index(op.f('ix_user_roles_user_id'), 'user_roles', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_roles_user_id'), table_name='user_roles')
    op.drop_index('ix_user_roles_unique', table_name='user_roles')
    op.drop_index(op.f('ix_user_roles_role_id'), table_name='user_roles')
    op.drop_table('user_roles')
    op.drop_index('ix_role_permissions_unique', table_name='role_permissions')
    op.drop_index(op.f('ix_role_permissions_role_id'), table_name='role_permissions')
    op.drop_index(op.f('ix_role_permissions_permission_id'), table_name='role_permissions')
    op.drop_table('role_permissions')
    op.drop_index('ix_refresh_tokens_user_is_revoked', table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_user_id'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_token'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_is_revoked'), table_name='refresh_tokens')
    op.drop_index('ix_refresh_tokens_expires_is_revoked', table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_expires_at'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index('ix_classifications_user_is_deleted', table_name='classifications')
    op.drop_index(op.f('ix_classifications_user_id'), table_name='classifications')
    op.drop_index(op.f('ix_classifications_is_deleted'), table_name='classifications')
    op.drop_index(op.f('ix_classifications_grain_type'), table_name='classifications')
    op.drop_index('ix_classifications_created_at_desc', table_name='classifications')
    op.drop_index(op.f('ix_classifications_created_at'), table_name='classifications')
    op.drop_table('classifications')
    op.drop_index(op.f('ix_audit_logs_user_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_type'), table_name='audit_logs')
    op.drop_index('ix_audit_logs_resource', table_name='audit_logs')
    op.drop_index('ix_audit_logs_created_at_desc', table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_created_at'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_users_is_deleted'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index('ix_users_email_is_deleted', table_name='users')
    op.drop_index('ix_users_email_is_active', table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_table('roles')
    op.drop_index('ix_permissions_resource_action_scope', table_name='permissions')
    op.drop_index(op.f('ix_permissions_resource'), table_name='permissions')
    op.drop_index(op.f('ix_permissions_name'), table_name='permissions')
    op.drop_table('permissions')
    # ### end Alembic commands ###
